@{
    ViewData["Title"] = "ProjectFileList";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
    Html.RenderPartial("_ProjectDetailPartialView");
}

<div class="d-flex flex-wrap flex-stack my-5">
    <!--begin::Heading-->
    <h3 class="fw-bolder my-2">
        Proje Dosyaları
    </h3>
</div>

<div class="alert alert-danger d-flex align-items-center p-5 mb-10">
    <span class="svg-icon svg-icon-2hx svg-icon-danger me-4">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
            <rect opacity="0.3" x="2" y="2" width="20" height="20" rx="10" fill="currentColor" />
            <rect x="11" y="14" width="7" height="2" rx="1" transform="rotate(-90 11 14)" fill="currentColor" />
            <rect x="11" y="17" width="2" height="2" rx="1" transform="rotate(-90 11 17)" fill="currentColor" />
        </svg>
    </span>
    <div class="d-flex flex-column">
        <h4 class="mb-1 text-danger">Uyarı</h4>
        <span>Bu sistemle uyumlu son kontrol edilmiş SSI uyumu <b class="text-danger">9.3.1</b> dir.</span>
    </div>
</div>

<div class="row g-6 g-xl-9 mb-6 mb-xl-9">
    @if (!String.IsNullOrEmpty(ViewBag.ProjectName))
    {
        <div class="col-md-6 col-lg-4 col-xl-3">
            <div class="card h-100">
                <div class="card-body d-flex justify-content-center text-center flex-column p-8" id="file-target">
                    <a href="#" id="download-button" class="text-gray-800 text-hover-primary d-flex flex-column">
                        <div class="symbol symbol-60px mb-5">
                            <img src="assets/media/svg/files/doc.svg" alt="">
                        </div>
                        <div class="fs-5 fw-bolder mb-2">@($"{ViewBag.ProjectName}.xlsx")</div>
                    </a>
                    <div class="fs-7 fw-bold text-gray-400">@ViewBag.CreatedDateDifference gün önce</div>
                    <div class="fs-7 fw-bold text-gray-400">Son güncelleme: @ViewBag.LastUpdatedDate</div>
                    <div class="d-flex justify-content-center gap-2 mt-3">
                        <a href="#" id="update-button" class="btn btn-active-primary btn-sm">Güncelle</a>
                        <a href="#" id="delete-button" class="btn btn-active-danger btn-sm">Sil</a>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="col-md-6 col-lg-4 col-xl-3">
        <div class="card h-100 flex-center bg-light-primary border-primary border border-dashed p-8">
            <form class="form" action="#" method="post">
                <div class="fv-row">
                    <div class="dropzone" id="kt_dropzonejs_example_1">
                        <div class="dz-message needsclick">
                            <i class="bi bi-file-earmark-arrow-up text-primary fs-3x"></i>
                            <div class="ms-4">
                                <h3 class="fs-5 fw-bolder text-gray-900 mb-1">PrintStudy dosyanızı yükleyiniz.</h3>
                                <span class="fs-7 fw-bold text-gray-400">Sadece 1 dosya seçiniz</span>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Güncelleme Modal -->
<div class="modal fade" id="updateFileModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Proje Dosyasını Güncelle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="text-center">
                    <i class="bi bi-file-earmark-arrow-up text-primary fs-3x mb-3"></i>
                    <p class="text-gray-700 mb-4">Mevcut dosyanız güncellenecektir. Yeni dosyayı seçiniz.</p>
                </div>
                <form class="form" action="#" method="post">
                    <div class="fv-row">
                        <div class="dropzone" id="kt_dropzonejs_update">
                            <div class="dz-message needsclick">
                                <div class="ms-4">
                                    <h3 class="fs-5 fw-bolder text-gray-900 mb-1">Güncel dosyayı yükleyiniz</h3>
                                    <span class="fs-7 fw-bold text-gray-400">Sadece .txt dosyaları kabul edilir</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section js {
    <script>
        const urlParams = new URLSearchParams(window.location.search);
        const projectId = urlParams.get('id');

        // Yeni dosya yükleme için Dropzone
        var myDropzone = new Dropzone("#kt_dropzonejs_example_1", {
            url: "upload-project-file",
            paramName: "printStudyFile",
            maxFiles: 1,
            maxFilesize: 3,
            params: {
                projectId: projectId,
                isUpdate: false
            },
            addRemoveLinks: true,
            accept: function (file, done) {
                if (file.type !== "text/plain") {
                    done("Yalnızca .txt dosyalarına izin verilir.");
                } else {
                    done();
                }
            }
        });

        // Güncelleme için Dropzone
        var updateDropzone = new Dropzone("#kt_dropzonejs_update", {
            url: "update-project-file",
            paramName: "printStudyFile",
            maxFiles: 1,
            maxFilesize: 3,
            params: {
                projectId: projectId,
                isUpdate: true
            },
            addRemoveLinks: true,
            accept: function (file, done) {
                if (file.type !== "text/plain") {
                    done("Yalnızca .txt dosyalarına izin verilir.");
                } else {
                    done();
                }
            }
        });

        // Dropzone hata yönetimi
        function handleDropzoneError(file, errorMessage, xhr) {
            let errors;
            if (xhr && xhr.responseText) {
                try {
                    let response = JSON.parse(xhr.responseText);
                    errors = response.Errors.join(", ");
                } catch (e) {
                    errors = "Bilinmeyen bir hata oluştu.";
                }
            } else {
                errors = errorMessage;
            }
            Swal.fire({
                text: `Hata: ${errors}`,
                icon: "error",
                buttonsStyling: false,
                confirmButtonText: "Tamam",
                customClass: { confirmButton: "btn fw-bold btn-primary" }
            });
        }

        // Yeni dosya yükleme eventi
        myDropzone.on("error", handleDropzoneError);
        myDropzone.on("success", function (file, response) {
            Swal.fire({
                text: "Dosya başarıyla yüklendi!",
                icon: "success",
                buttonsStyling: false,
                confirmButtonText: "Tamam",
                customClass: { confirmButton: "btn fw-bold btn-primary" },
            }).then(() => {
                location.reload(true);
                myDropzone.removeAllFiles(true);
            });
        });

        // Güncelleme dropzone eventi
        updateDropzone.on("error", handleDropzoneError);
        updateDropzone.on("success", function (file, response) {
            Swal.fire({
                text: "Dosya başarıyla güncellendi!",
                icon: "success",
                buttonsStyling: false,
                confirmButtonText: "Tamam",
                customClass: { confirmButton: "btn fw-bold btn-primary" },
            }).then(() => {
                $('#updateFileModal').modal('hide');
                location.reload(true);
                updateDropzone.removeAllFiles(true);
            });
        });

        // Güncelleme butonu
        var updateButton = document.querySelector("#update-button");
        if (updateButton) {
            updateButton.addEventListener("click", function(e) {
                e.preventDefault();
                $('#updateFileModal').modal('show');
            });
        }

        // İndirme butonu
        var downloadButton = document.querySelector("#download-button");
        var fileTarget = document.querySelector("#file-target");
        var blockUI = new KTBlockUI(fileTarget, {
            message: '<div class="blockui-message"><span class="spinner-border text-primary"></span> Yükleniyor...</div>',
        });

        downloadButton.addEventListener("click", function(e) {
            e.preventDefault();
            if (blockUI.isBlocked()) {
                blockUI.release();
            } else {
                blockUI.block();
                downloadExcelFile("@ViewBag.ProjectName");
            }
        });

        async function downloadExcelFile(projectName) {
            try {
                const response = await fetch(`download-project-file?projectId=${projectId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                if (!response.ok) {
                    throw new Error('Excel dosyası indirilemedi');
                }
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `${projectName}.xlsx`;
                document.body.appendChild(a);
                a.click();
                a.remove();
                window.URL.revokeObjectURL(url);
                blockUI.release();
            } catch (error) {
                console.error('Excel dosyası indirilemedi:', error);
                blockUI.release();
                Swal.fire({
                    text: "Dosya indirilemedi!",
                    icon: "error",
                    buttonsStyling: false,
                    confirmButtonText: "Tamam",
                    customClass: { confirmButton: "btn fw-bold btn-primary" }
                });
            }
        }

        // Silme butonu
        var deleteButton = document.querySelector("#delete-button");
        if (deleteButton) {
            deleteButton.addEventListener("click", function(e) {
                e.preventDefault();
                Swal.fire({
                    text: "Bu dosyayı silmek istediğinize emin misiniz?",
                    icon: "warning",
                    showCancelButton: true,
                    buttonsStyling: false,
                    confirmButtonText: "Evet, sil!",
                    cancelButtonText: "İptal",
                    customClass: {
                        confirmButton: "btn fw-bold btn-danger",
                        cancelButton: "btn fw-bold btn-active-light-primary"
                    }
                }).then(function (result) {
                    if (result.value) {
                        deleteExcelFile();
                    }
                });
            });
        }

        async function deleteExcelFile() {
            try {
                const response = await fetch(`delete-project-file?projectId=${projectId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                if (!response.ok) {
                    throw new Error('Dosya silinemedi');
                }
                Swal.fire({
                    text: "Dosya başarıyla silindi!",
                    icon: "success",
                    buttonsStyling: false,
                    confirmButtonText: "Tamam",
                    customClass: { confirmButton: "btn fw-bold btn-primary" }
                }).then(() => {
                    location.reload(true);
                });
            } catch (error) {
                console.error('Dosya silinemedi:', error);
                Swal.fire({
                    text: "Dosya silinirken bir hata oluştu!",
                    icon: "error",
                    buttonsStyling: false,
                    confirmButtonText: "Tamam",
                    customClass: { confirmButton: "btn fw-bold btn-primary" }
                });
            }
        }
    </script>
}